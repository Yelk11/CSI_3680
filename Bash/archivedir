#!/bin/bash
# archivedir--Creates a compressed archive of the specified directory.

maxarchivedir=10           # Size, in blocks, of 'big' directory
compress=gzip              # Change to your favorite compress app.
progname=$(basename $0)    # Nicer output format for error messages
#basename is the program name archivdir $0 means

if [ $# -eq 0 ] ; then      # No args? That's a problem. | $# = Number of paramaters used, -eq = equals.  Thus, If no paramaters used go to next line
  echo "Usage: $progname directory" >&2 ;exit 1 #Print Usage: archivedir  directory and exit program
fi # End if Statement

if [ ! -d $1 ] ; then # ! means the following expression is false, -d means the file exists and is a directory, $1 is our first parameter. Thus, if the file does not exist and is not a directory proceed to the echo statement below
  echo "${progname}: can't find directory $1 to archive." >&2; exit 1
fi # End if Statement

if [ "$(basename $1)" = "$1" -o "$1" = "." ] ; then 
  echo "${progname}: you must specify a subdirectory" >&2
  exit 1    #exit with general errors 
fi # End if Statement

if [ ! -w . ] ; then # ! means the following expression is false, -w means the file exits and we have write permission. Thus, if we do not have write permission move to the statement below
  echo "${progname}: cannot write archive file to current directory." >&2
  exit 1    #exit with general errors
fi # End if Statement

# Is the resultant archive going to be dangerously big? Let's check...

dirsize="$(du -s $1 | awk '{print $1}')"

if [ $dirsize -gt $maxarchivedir ] ; then #-gt is if the first value is larger than the second. Thus, if size of file is larger than our max number set at the start of the script, continue to statement below
  echo -n "Warning: directory $1 is $dirsize blocks. Proceed? [n] " #echo is print , -n is not to append new line so next statement is on same line, $1 is our first parameter (directory), $dirsize is the size of that directory
  read answer # read means read what the user has typed. You can technically type anything but if you don't use Y or y it will utilize the if statement below
  answer="$(echo $answer | tr '[:upper:]' '[:lower:]' | cut -c1)" 
  if [ "$answer" != "y" ] ; then # $answer is our variable created from user input, != means does not equal. Thus, if the converted user answer does not equal y move to the statement below
    echo "${progname}: archive of directory $1 canceled." >&2
    exit 0    #exit succesfully 
  fi # End inner if Statement
fi # End outer if Statement

archivename="$1.tgz"
archivename2="$1.bzip2"
archivename3="$1.xz"
archivename4="$1.zip" 

if tar -cf $1 | $compress > $archivename ; then #if tar is able to create and specify new archive for $1. $compress is redirected to archivename
  echo "Directory $1 archived as $archivename"  #echo prints statement 
else
  echo "Warning: tar encountered errors archiving $1" #echo prints statement 
fi # End if Statement

if tar -cf $1 | $compress > $archivename2 ; then  #if tar is able to create and specify new archive for $1. $compress is redirected to archivename2
  echo "Directory $1 archived as $archivename2"  #echo prints statement 
else
  echo "Warning: tar encountered errors archiving $1" #echo prints statement 
fi # End if Statement

if tar -cf $1 | $compress > $archivename3 ; then  #if tar is able to create and specify new archive for $1. $compress is redirected to archivename3
  echo "Directory $1 archived as $archivename3"  #echo prints statement 
else
  echo "Warning: tar encountered errors archiving $1" #echo prints statement 
fi # End if Statement

if tar -cf $1 | $compress > $archivename4 ; then  #if tar is able to create and specify new archive for $1. $compress is redirected to archivename4
  echo "Directory $1 archived as $archivename4"  #echo prints statement 
else
  echo "Warning: tar encountered errors archiving $1" #echo prints statement 
fi # End if Statement

exit 0     #exit succesfully 
